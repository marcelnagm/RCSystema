<?php

/* @WebProfiler/Profiler/base_js.html.twig */
class __TwigTemplate_4741edafa8ff5807ec55d303922909009eb0e65890ca0fcb7e9efb89c6b35d31 extends Twig_Template
{
    public function __construct(Twig_Environment $env)
    {
        parent::__construct($env);

        $this->parent = false;

        $this->blocks = array(
        );
    }

    protected function doDisplay(array $context, array $blocks = array())
    {
        // line 1
        echo "<script>/*<![CDATA[*/
    Sfjs = (function() {
        \"use strict\";

        var noop = function() {},

            profilerStorageKey = 'sf2/profiler/',

            request = function(url, onSuccess, onError, payload, options) {
                var xhr = window.XMLHttpRequest ? new XMLHttpRequest() : new ActiveXObject('Microsoft.XMLHTTP');
                options = options || {};
                options.maxTries = options.maxTries || 0;
                xhr.open(options.method || 'GET', url, true);
                xhr.setRequestHeader('X-Requested-With', 'XMLHttpRequest');
                xhr.onreadystatechange = function(state) {
                    if (4 !== xhr.readyState) {
                        return null;
                    }

                    if (xhr.status == 404 && options.maxTries > 1) {
                        setTimeout(function(){
                            options.maxTries--;
                            request(url, onSuccess, onError, payload, options);
                        }, 500);

                        return null;
                    }

                    if (200 === xhr.status) {
                        (onSuccess || noop)(xhr);
                    } else {
                        (onError || noop)(xhr);
                    }
                };
                xhr.send(payload || '');
            },

            hasClass = function(el, klass) {
                return el.className && el.className.match(new RegExp('\\\\b' + klass + '\\\\b'));
            },

            removeClass = function(el, klass) {
                if (el.className) {
                    el.className = el.className.replace(new RegExp('\\\\b' + klass + '\\\\b'), ' ');
                }
            },

            addClass = function(el, klass) {
                if (!hasClass(el, klass)) {
                    el.className += \" \" + klass;
                }
            },

            getPreference = function(name) {
                if (!window.localStorage) {
                    return null;
                }

                return localStorage.getItem(profilerStorageKey + name);
            },

            setPreference = function(name, value) {
                if (!window.localStorage) {
                    return null;
                }

                localStorage.setItem(profilerStorageKey + name, value);
            };

        return {
            hasClass: hasClass,

            removeClass: removeClass,

            addClass: addClass,

            getPreference: getPreference,

            setPreference: setPreference,

            request: request,

            load: function(selector, url, onSuccess, onError, options) {
                var el = document.getElementById(selector);

                if (el && el.getAttribute('data-sfurl') !== url) {
                    request(
                        url,
                        function(xhr) {
                            el.innerHTML = xhr.responseText;
                            el.setAttribute('data-sfurl', url);
                            removeClass(el, 'loading');
                            (onSuccess || noop)(xhr, el);
                        },
                        function(xhr) { (onError || noop)(xhr, el); },
                        '',
                        options
                    );
                }

                return this;
            },

            toggle: function(selector, elOn, elOff) {
                var i,
                    style,
                    tmp = elOn.style.display,
                    el = document.getElementById(selector);

                elOn.style.display = elOff.style.display;
                elOff.style.display = tmp;

                if (el) {
                    el.style.display = 'none' === tmp ? 'none' : 'block';
                }

                return this;
            }
        }
    })();
/*]]>*/</script>
";
    }

    public function getTemplateName()
    {
        return "@WebProfiler/Profiler/base_js.html.twig";
    }

    public function getDebugInfo()
    {
        return array (  26 => 3,  24 => 2,  19 => 1,  1080 => 340,  1074 => 338,  1064 => 334,  1060 => 333,  1051 => 332,  1048 => 331,  1036 => 326,  1030 => 324,  1024 => 322,  1022 => 321,  1020 => 320,  1010 => 318,  1007 => 317,  995 => 312,  989 => 310,  983 => 308,  981 => 307,  979 => 306,  975 => 305,  967 => 303,  963 => 302,  957 => 301,  954 => 300,  939 => 294,  928 => 286,  924 => 285,  908 => 278,  904 => 277,  902 => 276,  884 => 267,  881 => 265,  879 => 264,  876 => 263,  867 => 258,  843 => 257,  840 => 255,  835 => 252,  833 => 251,  830 => 250,  826 => 247,  824 => 246,  822 => 245,  815 => 239,  812 => 238,  808 => 235,  801 => 232,  797 => 229,  791 => 226,  789 => 225,  786 => 224,  782 => 221,  779 => 216,  774 => 212,  754 => 208,  748 => 205,  745 => 203,  739 => 200,  737 => 199,  735 => 198,  732 => 197,  728 => 192,  723 => 190,  719 => 187,  717 => 186,  704 => 182,  701 => 180,  699 => 179,  696 => 178,  692 => 175,  690 => 174,  683 => 170,  671 => 164,  668 => 163,  663 => 160,  661 => 159,  658 => 158,  654 => 155,  652 => 154,  645 => 150,  643 => 149,  640 => 148,  636 => 145,  633 => 144,  629 => 141,  627 => 140,  624 => 139,  620 => 136,  614 => 133,  609 => 129,  599 => 128,  594 => 127,  589 => 124,  587 => 123,  584 => 122,  579 => 118,  577 => 116,  576 => 115,  574 => 113,  570 => 112,  565 => 109,  562 => 108,  556 => 104,  552 => 102,  550 => 101,  544 => 99,  541 => 97,  477 => 82,  474 => 80,  472 => 79,  470 => 78,  465 => 77,  463 => 76,  446 => 75,  439 => 71,  437 => 70,  435 => 69,  410 => 59,  399 => 56,  397 => 55,  389 => 51,  383 => 49,  377 => 47,  365 => 41,  362 => 39,  360 => 38,  349 => 34,  339 => 28,  337 => 27,  334 => 26,  328 => 22,  323 => 19,  317 => 17,  314 => 16,  300 => 13,  298 => 12,  287 => 5,  278 => 331,  275 => 330,  273 => 317,  270 => 316,  265 => 299,  257 => 291,  252 => 283,  240 => 263,  237 => 262,  232 => 249,  224 => 241,  214 => 231,  212 => 224,  207 => 216,  204 => 215,  191 => 196,  186 => 190,  183 => 189,  176 => 178,  166 => 167,  164 => 163,  161 => 162,  159 => 158,  151 => 152,  146 => 147,  141 => 143,  126 => 121,  121 => 107,  111 => 90,  106 => 86,  101 => 73,  96 => 53,  86 => 36,  81 => 32,  71 => 15,  61 => 2,  522 => 92,  519 => 91,  510 => 164,  505 => 88,  502 => 87,  495 => 158,  493 => 157,  491 => 156,  489 => 155,  484 => 153,  482 => 152,  479 => 151,  469 => 144,  464 => 142,  452 => 139,  448 => 138,  444 => 137,  433 => 135,  430 => 134,  427 => 65,  424 => 132,  421 => 62,  418 => 130,  415 => 129,  412 => 60,  409 => 127,  406 => 126,  403 => 125,  400 => 124,  393 => 121,  387 => 119,  381 => 48,  375 => 115,  373 => 46,  370 => 45,  355 => 107,  351 => 106,  344 => 104,  341 => 103,  326 => 21,  318 => 94,  311 => 93,  308 => 92,  303 => 90,  295 => 11,  290 => 7,  285 => 4,  283 => 81,  271 => 75,  269 => 74,  261 => 71,  242 => 269,  234 => 56,  231 => 55,  228 => 54,  226 => 53,  220 => 51,  218 => 50,  215 => 49,  208 => 45,  203 => 44,  198 => 42,  182 => 34,  179 => 33,  169 => 168,  163 => 25,  157 => 23,  154 => 153,  152 => 21,  149 => 148,  138 => 12,  132 => 10,  130 => 9,  120 => 4,  105 => 2,  90 => 161,  85 => 150,  83 => 30,  78 => 103,  68 => 80,  65 => 79,  63 => 70,  58 => 60,  53 => 49,  38 => 8,  33 => 1,  1317 => 662,  1314 => 661,  1308 => 664,  1306 => 661,  1301 => 659,  1297 => 657,  1294 => 656,  1288 => 648,  1284 => 646,  1277 => 642,  1273 => 641,  1267 => 638,  1263 => 637,  1259 => 636,  1255 => 634,  1253 => 633,  1232 => 615,  1224 => 610,  1214 => 603,  1202 => 594,  1153 => 550,  1150 => 549,  1148 => 548,  1112 => 515,  1105 => 510,  1103 => 505,  1094 => 499,  1090 => 498,  1085 => 496,  1081 => 495,  1078 => 494,  1075 => 493,  1068 => 336,  1066 => 335,  1062 => 492,  1058 => 490,  1056 => 489,  1053 => 488,  1039 => 472,  1033 => 468,  1018 => 455,  1016 => 319,  999 => 440,  996 => 439,  992 => 437,  982 => 431,  980 => 430,  973 => 425,  971 => 304,  965 => 417,  962 => 416,  959 => 415,  952 => 483,  950 => 415,  946 => 296,  942 => 295,  940 => 411,  937 => 410,  930 => 287,  923 => 400,  921 => 284,  916 => 280,  911 => 395,  906 => 392,  903 => 391,  900 => 275,  897 => 274,  894 => 387,  891 => 271,  888 => 270,  886 => 384,  883 => 383,  880 => 382,  877 => 381,  875 => 380,  872 => 379,  869 => 259,  866 => 377,  864 => 376,  861 => 375,  858 => 374,  855 => 373,  853 => 372,  850 => 371,  847 => 370,  844 => 369,  841 => 368,  839 => 367,  837 => 253,  834 => 365,  827 => 357,  823 => 356,  819 => 244,  816 => 354,  813 => 353,  806 => 234,  804 => 233,  799 => 351,  795 => 228,  793 => 227,  790 => 347,  783 => 342,  777 => 338,  775 => 337,  770 => 334,  764 => 332,  756 => 327,  753 => 326,  751 => 206,  746 => 323,  742 => 202,  738 => 320,  736 => 319,  733 => 318,  726 => 191,  716 => 305,  714 => 185,  711 => 303,  700 => 294,  698 => 293,  693 => 290,  687 => 173,  681 => 169,  678 => 168,  673 => 165,  670 => 284,  662 => 279,  659 => 278,  657 => 277,  649 => 153,  644 => 268,  632 => 258,  630 => 257,  621 => 251,  617 => 135,  613 => 248,  611 => 247,  608 => 246,  598 => 238,  592 => 126,  586 => 236,  583 => 235,  578 => 234,  575 => 114,  569 => 231,  567 => 110,  558 => 224,  554 => 103,  551 => 222,  548 => 100,  545 => 220,  542 => 219,  539 => 96,  536 => 95,  533 => 216,  531 => 215,  525 => 211,  520 => 208,  518 => 207,  511 => 203,  507 => 202,  503 => 200,  501 => 199,  498 => 198,  487 => 192,  483 => 190,  481 => 189,  478 => 188,  471 => 183,  461 => 141,  445 => 163,  443 => 74,  438 => 160,  429 => 66,  425 => 64,  423 => 63,  420 => 150,  411 => 144,  402 => 58,  398 => 123,  394 => 54,  390 => 134,  388 => 133,  385 => 118,  379 => 124,  368 => 116,  364 => 109,  359 => 114,  357 => 37,  350 => 111,  346 => 33,  342 => 30,  338 => 107,  335 => 106,  332 => 98,  330 => 23,  327 => 103,  324 => 102,  321 => 18,  319 => 98,  316 => 97,  313 => 96,  306 => 91,  304 => 96,  296 => 94,  291 => 91,  286 => 89,  279 => 84,  263 => 294,  258 => 70,  255 => 284,  250 => 274,  247 => 273,  244 => 60,  233 => 54,  230 => 244,  209 => 223,  201 => 213,  199 => 212,  196 => 211,  178 => 184,  171 => 173,  168 => 26,  162 => 11,  156 => 157,  144 => 144,  137 => 2,  129 => 122,  124 => 108,  122 => 488,  119 => 95,  117 => 410,  114 => 91,  107 => 3,  104 => 74,  99 => 54,  97 => 246,  94 => 45,  92 => 198,  79 => 29,  74 => 16,  72 => 89,  69 => 11,  67 => 53,  62 => 24,  49 => 10,  44 => 8,  284 => 128,  280 => 80,  274 => 80,  267 => 120,  260 => 293,  246 => 108,  239 => 104,  227 => 243,  223 => 94,  210 => 84,  194 => 197,  188 => 194,  173 => 177,  158 => 52,  153 => 50,  150 => 49,  139 => 139,  136 => 138,  134 => 133,  116 => 94,  112 => 365,  102 => 1,  98 => 168,  93 => 162,  88 => 151,  82 => 150,  76 => 25,  59 => 32,  57 => 13,  50 => 15,  45 => 41,  40 => 19,  32 => 6,  30 => 5,  25 => 1,  89 => 37,  84 => 33,  80 => 112,  77 => 132,  73 => 90,  54 => 12,  48 => 42,  46 => 14,  42 => 12,  37 => 12,  27 => 8,  21 => 1,  292 => 127,  289 => 90,  282 => 3,  276 => 18,  272 => 17,  268 => 300,  264 => 15,  259 => 14,  253 => 112,  249 => 11,  245 => 270,  241 => 59,  238 => 56,  235 => 250,  229 => 5,  222 => 238,  219 => 237,  217 => 232,  213 => 124,  206 => 121,  202 => 79,  197 => 117,  195 => 116,  192 => 115,  185 => 35,  181 => 185,  177 => 32,  175 => 108,  170 => 28,  167 => 106,  165 => 56,  155 => 51,  148 => 94,  145 => 93,  143 => 92,  131 => 132,  127 => 8,  113 => 71,  109 => 87,  95 => 167,  91 => 35,  87 => 188,  75 => 28,  70 => 26,  66 => 25,  52 => 11,  36 => 14,  34 => 7,  29 => 5,  23 => 18,  64 => 3,  60 => 69,  55 => 59,  51 => 8,  47 => 9,  43 => 20,  39 => 26,  35 => 7,  31 => 1,  28 => 3,);
    }
}
